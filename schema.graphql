# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"A node, according to the Relay specification."
interface Node {
    "The id of this node."
    id: ID!
}

type Deployment implements Node {
    _id: Int!
    dateCompleted: String
    dateCreated: String!
    dateStarted: String
    id: ID!
    name: String!
    remoteId: String!
    status: String!
    uiLink: String!
}

type HostingProject implements Node {
    _id: Int!
    authorizedAdmins: Iterable!
    authorizedUsers: Iterable
    dateCreated: String!
    dateUpdated: String!
    gitPath: String!
    gitUrl: String!
    id: ID!
    lagoonName: String!
    lagoonProject: LagoonProject
    name: String!
    productionBranch: String!
    stageBranches: Iterable!
    startingPoint: StartingPoint!
}

"Connection for HostingProject."
type HostingProjectConnection {
    edges: [HostingProjectEdge]
    pageInfo: HostingProjectPageInfo!
    totalCount: Int!
}

"Edge of HostingProject."
type HostingProjectEdge {
    cursor: String!
    node: HostingProject
}

"Information about the current page."
type HostingProjectPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type LagoonProject implements Node {
    _id: Int!
    autoIdle: Int!
    availability: String!
    branches: String!
    created: String
    developmentEnvironmentsLimit: Int!
    environments: Iterable!
    gitUrl: String!
    id: ID!
    kubernetes: String!
    kubernetesNamespacePattern: String!
    metadata: Iterable!
    name: String!
    productionAlias: String!
    productionEnvironment: String!
    productionRoutes: String!
    pullrequests: String!
    standbyAlias: String!
    standbyProductionEnvironment: String!
    standbyRoutes: String!
    storageCalc: Int!
    subfolder: String!
}

type Membership implements Node {
    dateCreated: String!
    dateUpdated: String!
    id: ID!
    role: String!
    team: Team!
    user: User!
}

"Connection for Membership."
type MembershipConnection {
    edges: [MembershipEdge]
    pageInfo: MembershipPageInfo!
    totalCount: Int!
}

"Edge of Membership."
type MembershipEdge {
    cursor: String!
    node: Membership
}

"Information about the current page."
type MembershipPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Mutation {
    "Backups a HostingProject."
    backupHostingProject(input: backupHostingProjectInput!): backupHostingProjectPayload
    "Cancels a Deployment."
    cancelDeployment(input: cancelDeploymentInput!): cancelDeploymentPayload
    "Creates a HostingProject."
    createHostingProject(input: createHostingProjectInput!): createHostingProjectPayload
    "Creates a Membership."
    createMembership(input: createMembershipInput!): createMembershipPayload
    "Creates a Project."
    createProject(input: createProjectInput!): createProjectPayload
    "Creates a StartingPoint."
    createStartingPoint(input: createStartingPointInput!): createStartingPointPayload
    "Creates a Team."
    createTeam(input: createTeamInput!): createTeamPayload
    "Creates a User."
    createUser(input: createUserInput!): createUserPayload
    "Deletes a HostingProject."
    deleteHostingProject(input: deleteHostingProjectInput!): deleteHostingProjectPayload
    "Deletes a Membership."
    deleteMembership(input: deleteMembershipInput!): deleteMembershipPayload
    "Deletes a Project."
    deleteProject(input: deleteProjectInput!): deleteProjectPayload
    "Deletes a StartingPoint."
    deleteStartingPoint(input: deleteStartingPointInput!): deleteStartingPointPayload
    "Deletes a Team."
    deleteTeam(input: deleteTeamInput!): deleteTeamPayload
    "Deletes a User."
    deleteUser(input: deleteUserInput!): deleteUserPayload
    "Deploys a HostingProject."
    deployHostingProject(input: deployHostingProjectInput!): deployHostingProjectPayload
    "Edits a HostingProject."
    editHostingProject(input: editHostingProjectInput!): editHostingProjectPayload
    "Edits a Project."
    editProject(input: editProjectInput!): editProjectPayload
    "Restores a HostingProject."
    restoreHostingProject(input: restoreHostingProjectInput!): restoreHostingProjectPayload
    "Updates a Membership."
    updateMembership(input: updateMembershipInput!): updateMembershipPayload
    "Updates a StartingPoint."
    updateStartingPoint(input: updateStartingPointInput!): updateStartingPointPayload
    "Updates a Team."
    updateTeam(input: updateTeamInput!): updateTeamPayload
    "Updates a User."
    updateUser(input: updateUserInput!): updateUserPayload
}

type Project implements Node {
    _id: Int!
    authorizedAdmins: Iterable!
    authorizedUsers: Iterable
    dateCreated: String!
    dateUpdated: String!
    id: ID!
    name: String!
}

"Connection for Project."
type ProjectConnection {
    edges: [ProjectEdge]
    pageInfo: ProjectPageInfo!
    totalCount: Int!
}

"Edge of Project."
type ProjectEdge {
    cursor: String!
    node: Project
}

"Information about the current page."
type ProjectPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Query {
    hostingProject(id: ID!): HostingProject
    hostingProjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        id: Int,
        id_list: [Int],
        "Returns the last n elements from the list."
        last: Int,
        name: String,
        order: [HostingProjectFilter_order]
    ): HostingProjectConnection
    membership(id: ID!): Membership
    memberships(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): MembershipConnection
    node(id: ID!): Node
    project(id: ID!): Project
    projects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        id: Int,
        id_list: [Int],
        "Returns the last n elements from the list."
        last: Int,
        name: String,
        order: [ProjectFilter_order]
    ): ProjectConnection
    startingPoint(id: ID!): StartingPoint
    startingPoints: [StartingPoint]
    team(id: ID!): Team
    teams(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): TeamConnection
    user(id: ID!): User
    users(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): UserConnection
}

type StartingPoint implements Node {
    """

    The repository to base new projects with this starting point off of
    EX: git@github.com:concrete5/concrete5.git
    """
    baseRepository: String!
    dateCreated: String!
    dateUpdated: String!
    handle: String!
    id: ID!
    "The human readable name for this starting point"
    name: String!
    """

    The name of the starting point to use. We basically clone $baseRepository and run c5:install with this value
    provided for --starting-point
    """
    startingPoint: String!
}

type Team implements Node {
    _id: String!
    dateCreated: String!
    dateUpdated: String!
    id: ID!
    members(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): MembershipConnection
}

"Connection for Team."
type TeamConnection {
    edges: [TeamEdge]
    pageInfo: TeamPageInfo!
    totalCount: Int!
}

"Edge of Team."
type TeamEdge {
    cursor: String!
    node: Team
}

"Information about the current page."
type TeamPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type User implements Node {
    "We need to have a remote ID provided in order to create a member"
    _id: Int!
    dateCreated: String!
    dateUpdated: String!
    id: ID!
    memberships(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): MembershipConnection
}

"Connection for User."
type UserConnection {
    edges: [UserEdge]
    pageInfo: UserPageInfo!
    totalCount: Int!
}

"Edge of User."
type UserEdge {
    cursor: String!
    node: User
}

"Information about the current page."
type UserPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type backupHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type cancelDeploymentPayload {
    clientMutationId: String
    deployment: Deployment
}

type createHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type createMembershipPayload {
    clientMutationId: String
    membership: Membership
}

type createProjectPayload {
    clientMutationId: String
    project: Project
}

type createStartingPointPayload {
    clientMutationId: String
    startingPoint: StartingPoint
}

type createTeamPayload {
    clientMutationId: String
    team: Team
}

type createUserPayload {
    clientMutationId: String
    user: User
}

type deleteHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type deleteMembershipPayload {
    clientMutationId: String
    membership: Membership
}

type deleteProjectPayload {
    clientMutationId: String
    project: Project
}

type deleteStartingPointPayload {
    clientMutationId: String
    startingPoint: StartingPoint
}

type deleteTeamPayload {
    clientMutationId: String
    team: Team
}

type deleteUserPayload {
    clientMutationId: String
    user: User
}

type deployHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type editHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type editProjectPayload {
    clientMutationId: String
    project: Project
}

type restoreHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type updateMembershipPayload {
    clientMutationId: String
    membership: Membership
}

type updateStartingPointPayload {
    clientMutationId: String
    startingPoint: StartingPoint
}

type updateTeamPayload {
    clientMutationId: String
    team: Team
}

type updateUserPayload {
    clientMutationId: String
    user: User
}

input HostingProjectFilter_order {
    dateCreated: String
    id: String
    name: String
}

input ProjectFilter_order {
    dateCreated: String
    id: String
    name: String
}

input backupHostingProjectInput {
    clientMutationId: String
    "The environment to backup"
    environment: String!
    "The project to backup"
    project: Int!
}

input cancelDeploymentInput {
    _id: Int!
    apiClient: String!
    clientMutationId: String
    dateCompleted: String
    dateCreated: String!
    dateStarted: String
    id: ID!
    name: String!
    remoteId: String!
    status: String!
    uiLink: String!
}

input createHostingProjectInput {
    authorizedAdmins: Iterable!
    authorizedUsers: Iterable
    clientMutationId: String
    name: String!
    productionBranch: String!
    stageBranches: Iterable!
    startingPoint: String!
}

input createMembershipInput {
    clientMutationId: String
    role: String!
    team: String!
    user: String!
}

input createProjectInput {
    authorizedAdmins: Iterable!
    authorizedUsers: Iterable
    clientMutationId: String
    name: String!
}

input createStartingPointInput {
    """

    The repository to base new projects with this starting point off of
    EX: git@github.com:concrete5/concrete5.git
    """
    baseRepository: String!
    clientMutationId: String
    handle: String!
    "The human readable name for this starting point"
    name: String!
    """

    The name of the starting point to use. We basically clone $baseRepository and run c5:install with this value
    provided for --starting-point
    """
    startingPoint: String!
}

input createTeamInput {
    clientMutationId: String
    members: [String]
}

input createUserInput {
    "We need to have a remote ID provided in order to create a member"
    _id: Int!
    clientMutationId: String
    memberships: [String]
}

input deleteHostingProjectInput {
    clientMutationId: String
    id: ID!
}

input deleteMembershipInput {
    clientMutationId: String
    id: ID!
}

input deleteProjectInput {
    clientMutationId: String
    id: ID!
}

input deleteStartingPointInput {
    clientMutationId: String
    id: ID!
}

input deleteTeamInput {
    clientMutationId: String
    id: ID!
}

input deleteUserInput {
    clientMutationId: String
    id: ID!
}

input deployHostingProjectInput {
    "The branch to deploy"
    branch: String!
    clientMutationId: String
    "The project to deploy"
    project: Int!
}

input editHostingProjectInput {
    authorizedAdmins: Iterable!
    authorizedUsers: Iterable
    clientMutationId: String
    id: ID!
    name: String!
    productionBranch: String!
    stageBranches: Iterable!
    startingPoint: String!
}

input editProjectInput {
    authorizedAdmins: Iterable!
    authorizedUsers: Iterable
    clientMutationId: String
    id: ID!
    name: String!
}

input restoreHostingProjectInput {
    clientMutationId: String
    "The environment to restore"
    environment: String!
    "The environment to restore"
    project: Int!
}

input updateMembershipInput {
    clientMutationId: String
    id: ID!
    role: String
    team: String
    user: String
}

input updateStartingPointInput {
    """

    The repository to base new projects with this starting point off of
    EX: git@github.com:concrete5/concrete5.git
    """
    baseRepository: String
    clientMutationId: String
    handle: String
    id: ID!
    "The human readable name for this starting point"
    name: String
    """

    The name of the starting point to use. We basically clone $baseRepository and run c5:install with this value
    provided for --starting-point
    """
    startingPoint: String
}

input updateTeamInput {
    clientMutationId: String
    id: ID!
    members: [String]
}

input updateUserInput {
    "We need to have a remote ID provided in order to create a member"
    _id: Int
    clientMutationId: String
    id: ID!
    memberships: [String]
}


"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable
